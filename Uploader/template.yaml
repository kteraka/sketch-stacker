AWSTemplateFormatVersion: '2010-09-09'
Description: Gyazo-like service using AWS services with Basic Authentication and CloudFront

# ???????????UpdateImagesJsonLambda ???????? S3?????CloudFront????????????

Parameters:
  ImageBucketName:
    Type: String
    Description: Name of the S3 bucket to store images
  BasicAuthUsername:
    Type: String
    Description: Username for Basic Authentication
  # BasicAuthPassword:
  #   Type: String
  #   Description: Password for Basic Authentication
  #   NoEcho: true
  ImagesJsonFilenamePath:
    Type: String
    Default: viewer/images.json
    Description: This Json file logs filenames stored in ImageBucket
  CloudFrontDistributionId:
    Type: String
    Description: For avoiding circular dependency in UpdateImagesJsonLambda. At
      first deploy, fill here some dummy string. After deploy, fill here the
      created Distribution ID in your stack and update stack so that
      UpdateImagesJsonLambda will work.

Resources:
  BasicAuthPassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${AWS::StackName}Secret
      Description: Password for Basic Authentication
      GenerateSecretString:
        SecretStringTemplate: '{"secret_key": "password"}'
        GenerateStringKey: secret_key
        PasswordLength: 16
        ExcludePunctuation: true
        RequireEachIncludedType: true
  ImageBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref ImageBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt UpdateImagesJsonLambda.Arn
    DependsOn:
      - UpdateImagesJsonLambdaPermission
  ImageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ImageBucket
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub ${ImageBucket.Arn}/*
            Principal: '*'
            Condition:
              StringEquals:
                aws:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}

  ImageBucketOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub OAC for ${ImageBucketName}
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CORS Response Headers Policy
  CORSResponseHeadersPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Name: !Sub "${AWS::StackName}-CORS-Policy"
        Comment: "CORS headers for image viewer application"
        CorsConfig:
          AccessControlAllowCredentials: false
          AccessControlAllowHeaders:
            Items:
              - "*"
          AccessControlAllowMethods:
            Items:
              - GET
              - HEAD
              - OPTIONS
          AccessControlAllowOrigins:
            Items:
              - "http://localhost:*"
              - "https://localhost:*"
              - "http://127.0.0.1:*"
              - "https://127.0.0.1:*"
          AccessControlMaxAgeSec: 600
          OriginOverride: true

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
          TargetOriginId: ImageS3Origin
          ViewerProtocolPolicy: redirect-to-https
          ResponseHeadersPolicyId: !Ref CORSResponseHeadersPolicy
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName: !GetAtt ImageBucket.RegionalDomainName
            Id: ImageS3Origin
            S3OriginConfig: {}
            OriginAccessControlId: !Ref ImageBucketOAC
        PriceClass: PriceClass_100

  UploadLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::${ImageBucketName}/* # Avoid recursive reference

  UploadFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt UploadLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          const { S3Client, PutObjectCommand } = require('@aws-sdk/client-s3');
          const s3Client = new S3Client({ region: process.env.AWS_DEFAULT_REGION });

          exports.handler = async (event) => {
            try {
              const body = JSON.parse(event.body);
              const imageData = Buffer.from(body.image, 'base64');
              const key = `${Date.now()}.png`;

              const command = new PutObjectCommand({
                Bucket: process.env.BUCKET_NAME,
                Key: key,
                Body: imageData,
                ContentType: 'image/png',
                StorageClass: 'GLACIER_IR'  // ?????????Glacier Instant Retrieval???
              });

              await s3Client.send(command);

              return {
                statusCode: 200,
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  url: `https://${process.env.CLOUDFRONT_DOMAIN}/${key}`
                })
              };
            } catch (error) {
              console.error('Error:', error);
              return {
                statusCode: 500,
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({ error: 'An error occurred while processing your request.' })
              };
            }
          };
      Runtime: nodejs22.x
      Timeout: 10
      Environment:
        Variables:
          BUCKET_NAME: !Ref ImageBucket
          CLOUDFRONT_DOMAIN: !GetAtt CloudFrontDistribution.DomainName

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AWS::StackName}ImageUploadAPI

  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: upload
      RestApiId: !Ref ApiGateway

  ApiAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: !Sub ${AWS::StackName}BasicAuthorizer
      Type: REQUEST
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref ApiGateway
      AuthorizerUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthorizerFunction.Arn}/invocations
      AuthorizerResultTtlInSeconds: 300

  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref ApiResource
      RestApiId: !Ref ApiGateway
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref ApiAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadFunction.Arn}/invocations

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod

  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt UploadFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/upload

  AuthorizerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt UploadLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            const authHeader = event.headers.Authorization || event.headers.authorization;
            if (!authHeader) return generatePolicy('user', 'Deny', event.methodArn);

            const encodedCreds = authHeader.split(' ')[1];
            const plainCreds = Buffer.from(encodedCreds, 'base64').toString().split(':');
            const username = plainCreds[0];
            const password = plainCreds[1];

            if (username === process.env.AUTH_USERNAME && password === process.env.AUTH_PASSWORD) {
              return generatePolicy('user', 'Allow', event.methodArn);
            }

            return generatePolicy('user', 'Deny', event.methodArn);
          };

          const generatePolicy = (principalId, effect, resource) => {
            return {
              principalId: principalId,
              policyDocument: {
                Version: '2012-10-17',
                Statement: [{
                  Action: 'execute-api:Invoke',
                  Effect: effect,
                  Resource: resource
                }]
              }
            };
          };
      Runtime: nodejs22.x
      Environment:
        Variables:
          AUTH_USERNAME: !Ref BasicAuthUsername
          AUTH_PASSWORD: !Sub '{{resolve:secretsmanager:${BasicAuthPassword}:SecretString:secret_key}}'

  AuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AuthorizerFunction
      Principal: apigateway.amazonaws.com

  # -----------------------------------------------------------------------------------------------
  # images.json ???????
  # -----------------------------------------------------------------------------------------------

  # UpdateImagesJsonLambda ?IAM???
  UpdateImagesJsonLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${ImageBucketName}
                  - !Sub arn:aws:s3:::${ImageBucketName}/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - cloudfront:CreateInvalidation
                Resource: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistributionId} # Avoid recursive reference
  UpdateImagesJsonLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}UpdateImagesJsonFunction
      Handler: index.handler
      Role: !GetAtt UpdateImagesJsonLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          const { S3Client, ListObjectsV2Command, PutObjectCommand } = require('@aws-sdk/client-s3');
          const { CloudFront } = require('@aws-sdk/client-cloudfront');

          const s3Client = new S3Client({ region: process.env.AWS_DEFAULT_REGION });

          exports.handler = async (event) => {
            const imageBucket = process.env.IMAGE_BUCKET;
            const fileName = process.env.IMAGES_JSON_FILENAME_PATH;

            try {
              // imageBucket??????????????
              const listObjectsCommand = new ListObjectsV2Command({ Bucket: imageBucket });
              const listObjectsResponse = await s3Client.send(listObjectsCommand);
              const fileNames = listObjectsResponse.Contents.map(object => object.Key);
              console.log(fileNames);

              // images.json????????????????
              const jsonData = JSON.stringify(fileNames, null, 2);
              console.log(jsonData);

              // imageBucket?images.json???
              const putObjectCommand = new PutObjectCommand({
                Bucket: imageBucket,
                Key: fileName,
                Body: jsonData,
                ContentType: 'application/json',
              });

              await s3Client.send(putObjectCommand);
              console.log("/"+fileName)
              //images.json??????????viewer??????
              const client = new CloudFront();
              await client.createInvalidation({
                DistributionId: process.env.DISTRIBUTION_ID,
                InvalidationBatch: {
                  CallerReference: new Date().toISOString(),
                  Paths: {
                    Quantity: 1,
                    Items: ["/" + fileName]
                  }
                }
              });
              return {
                statusCode: 200,
                body: 'images.json saved successfully!',
              };
            } catch (error) {
              console.error('Error processing S3 event', error);
              return {
                statusCode: 500,
                body: 'Error processing S3 event',
              };
            }
          };
      Environment:
        Variables:
          IMAGE_BUCKET: !Ref ImageBucketName
          DISTRIBUTION_ID: !Ref CloudFrontDistributionId # Avoid recursive reference
          IMAGES_JSON_FILENAME_PATH: !Ref ImagesJsonFilenamePath
      Runtime: nodejs22.x # ????Node.js???
      Timeout: 300 # ???????300??

  # Lambda???ImageBucket???????????
  UpdateImagesJsonLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UpdateImagesJsonLambda
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::${ImageBucketName} # Avoid recursive reference

# -----------------------------------------------------------------------------------------------

Outputs:
  ApiEndpoint:
    Description: API Endpoint
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/upload
  CloudFrontDomain:
    Description: CloudFront Distribution Domain
    Value: !GetAtt CloudFrontDistribution.DomainName
